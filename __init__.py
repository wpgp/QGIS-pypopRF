# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PyPopRF
                                 A QGIS plugin
 A plugin for population prediction and dasymetric mapping using machine learning
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-01-07
        copyright            : (C) 2025 by WorldPop SDI Team
        email                : b.nosatiuk@soton.ac.uk
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""
import importlib
import os
import subprocess
import sys
from pathlib import Path


def classFactory(iface):  # pylint: disable=invalid-name
    """Load PyPopRF class from file PyPopRF.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """

    plugin_dir = Path(__file__).parent
    deps_path = os.path.join(plugin_dir, "deps")

    if not os.path.exists(deps_path):
        requirements_path = os.path.join(plugin_dir, "requirements.txt")
        python_exe = os.path.join(os.environ.get('PYTHONHOME'), 'python.exe')
        subprocess.check_call([python_exe, '-m', 'pip', 'install', '-r', requirements_path,
                               '--platform', 'win_amd64', '--only-binary=:all:',
                               f'--target={deps_path}'])

    if deps_path not in sys.path:
        sys.path.insert(1, deps_path)
        importlib.invalidate_caches()

    from .qgis_pypoprf import PyPopRF
    return PyPopRF(iface)
